"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const pkgDir = require("pkg-dir");
const resolveFrom = require("resolve-from");
const errors_1 = require("./errors");
const standardizeName_1 = require("./standardizeName");
function isPresetObject(target) {
    return typeof target === 'object';
}
function normalize(arr) {
    if (!Array.isArray(arr))
        return [];
    return arr.map(item => Array.isArray(item) ? item[0] : item);
}
function resolveName(name, fromDir, cache) {
    if (cache.has(name))
        return cache.get(name);
    const filename = resolveFrom.silent(fromDir, name);
    cache.set(name, filename);
    return filename;
}
function resolvePackage(filename, fromFile) {
    if (fromFile)
        return null;
    return pkgDir.sync(filename);
}
function resolvePluginsAndPresets(chains, sharedCache) {
    const dirCaches = sharedCache
        ? sharedCache.pluginsAndPresets
        : new Map();
    const getCache = (dir) => {
        if (dirCaches.has(dir))
            return dirCaches.get(dir);
        const cache = new Map();
        dirCaches.set(dir, cache);
        return cache;
    };
    const byConfig = new Map();
    const resolveConfig = (config) => {
        if (byConfig.has(config))
            return;
        const plugins = new Map();
        const presets = new Map();
        byConfig.set(config, { plugins, presets });
        const fromDir = config.dir;
        const cache = getCache(fromDir);
        const resolve = (kind, ref) => {
            const possibility = standardizeName_1.default(kind, ref);
            const filename = resolveName(possibility.name, fromDir, cache);
            if (!filename)
                throw new errors_1.ResolveError(config.source, kind, ref);
            const fromPackage = resolvePackage(filename, possibility.fromFile);
            const entry = { filename, fromPackage };
            if (kind === "plugin" /* PLUGIN */) {
                plugins.set(ref, entry);
            }
            else {
                presets.set(ref, entry);
            }
        };
        const resolvePlugins = (targets) => {
            for (const target of targets) {
                if (typeof target === 'string')
                    resolve("plugin" /* PLUGIN */, target);
            }
        };
        const resolvePresets = (targets) => {
            for (const target of targets) {
                if (typeof target === 'string') {
                    resolve("preset" /* PRESET */, target);
                }
                else if (isPresetObject(target)) {
                    resolvePlugins(normalize(target.plugins));
                    resolvePresets(normalize(target.presets));
                }
            }
        };
        resolvePlugins(normalize(config.options.plugins));
        resolvePresets(normalize(config.options.presets));
    };
    const resolveChains = (iterable) => {
        for (const chain of iterable) {
            for (const config of chain) {
                resolveConfig(config);
            }
            resolveChains(chain.overrides);
        }
    };
    resolveChains(chains);
    return byConfig;
}
exports.default = resolvePluginsAndPresets;
//# sourceMappingURL=resolvePluginsAndPresets.js.map