/// <reference types="node" />
import Cache from './Cache';
import { Dependency, Source } from './reduceChains';
export declare type VerificationResult = {
    sourcesChanged: true;
} | {
    missingSource: true;
} | {
    badDependency: true;
} | {
    sourcesChanged: false;
    dependenciesChanged: boolean;
    cacheKeys: {
        dependencies: string;
        sources: string;
    };
    verifier: Verifier;
};
export default class Verifier {
    readonly babelrcDir?: string;
    readonly dependencies: Dependency[];
    readonly envNames: Set<string>;
    readonly sources: Source[];
    private constructor();
    static fromBuffer(buffer: Buffer): Verifier;
    static hashAndCreate(babelrcDir: string | undefined, envNames: Set<string>, dependencies: Dependency[], sources: Source[], fixedSourceHashes: Map<string, string>, cache?: Cache): Promise<Verifier>;
    cacheKeysForEnv(envName?: string): {
        dependencies: string;
        sources: string;
    };
    verifyEnv(envName?: string | null, fixedHashes?: {
        sources?: Map<string, string>;
    }, cache?: Cache): Promise<VerificationResult>;
    toBuffer(): Buffer;
    private selectByEnv<Item>(arr, envName);
}
