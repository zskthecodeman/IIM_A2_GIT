export interface HandlerFn<T extends any, Data> {
    (data: Data): T;
}
export interface Api<Data> {
    (val: boolean): void;
    <T>(val: HandlerFn<T, Data>): T;
    forever: () => void;
    never: () => void;
    using<T>(handler: HandlerFn<T, Data>): T;
    invalidate<T>(handler: HandlerFn<T, Data>): T;
}
export default class SimulatedBabelCache<Data extends object> {
    api: Api<Data>;
    private computedHash?;
    private configuration;
    private keys;
    private sealed;
    constructor(data: Data);
    readonly wasConfigured: boolean;
    readonly never: boolean;
    hash(): string | null;
    seal(): void;
}
