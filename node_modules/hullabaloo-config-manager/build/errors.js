"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
class SourceError extends Error {
    constructor(message, source, parent) {
        super(`${source}: ${message}`);
        this.name = 'SourceError';
        this.source = source;
        this.parent = parent || null;
    }
}
exports.SourceError = SourceError;
class NoSourceFileError extends SourceError {
    constructor(source) {
        super('No such file', source);
        this.name = 'NoSourceFileError';
    }
}
exports.NoSourceFileError = NoSourceFileError;
class ParseError extends SourceError {
    constructor(source, parent) {
        super(`Error while parsing â€” ${parent.message}`, source, parent);
        this.name = 'ParseError';
    }
}
exports.ParseError = ParseError;
class InvalidFileError extends SourceError {
    constructor(source, message) {
        super(message, source);
        this.name = 'InvalidFileError';
    }
}
exports.InvalidFileError = InvalidFileError;
class ExtendsError extends SourceError {
    constructor(source, clause, parent) {
        super(`Couldn't resolve extends clause: ${clause}`, source, parent);
        this.name = 'ExtendsError';
        this.clause = clause;
    }
}
exports.ExtendsError = ExtendsError;
class BadDependencyError extends SourceError {
    constructor(source, parent) {
        super("Couldn't resolve dependency", source, parent);
        this.name = 'BadDependencyError';
    }
}
exports.BadDependencyError = BadDependencyError;
class MultipleSourcesError extends SourceError {
    constructor(source, otherSource) {
        super('Multiple configuration files found', source);
        this.name = 'MultipleSourcesError';
        this.otherSource = otherSource;
    }
}
exports.MultipleSourcesError = MultipleSourcesError;
class ResolveError extends SourceError {
    constructor(source, kind, ref, message) {
        super(message || `Couldn't find ${kind} ${JSON.stringify(ref)} relative to directory`, source);
        this.name = 'ResolveError';
        this.ref = ref;
        this.isPlugin = kind === 'plugin';
        this.isPreset = kind === 'preset';
    }
}
exports.ResolveError = ResolveError;
class ResolveFromCacheError extends ResolveError {
    constructor(source, kind, ref) {
        super(source, kind, ref, `Couldn't find ${kind} ${JSON.stringify(ref)} in cache`);
        this.name = 'ResolveFromCacheError';
    }
}
exports.ResolveFromCacheError = ResolveFromCacheError;
//# sourceMappingURL=errors.js.map