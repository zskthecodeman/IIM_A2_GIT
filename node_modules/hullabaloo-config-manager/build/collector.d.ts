import BabelOptions, { LimitedOptions } from './BabelOptions';
import Cache from './Cache';
export declare const enum FileType {
    JS = "JS",
    JSON = "JSON",
    JSON5 = "JSON5",
}
export declare class Config {
    readonly dir: string;
    readonly envName: string | null;
    readonly fileType: FileType;
    readonly hash: string | null;
    readonly options: BabelOptions;
    readonly runtimeDependencies: Map<string, string> | null;
    readonly runtimeHash: string | null;
    readonly source: string;
    babelrcPointer: number | null;
    extends: Config | null;
    extendsPointer: number | null;
    readonly envPointers: Map<string, number>;
    readonly overridePointers: number[];
    constructor(dir: string, envName: string | null, hash: string | null, options: BabelOptions, source: string, fileType: FileType, runtimeDependencies: Map<string, string> | null, runtimeHash: string | null);
    copyAsOverride(index: number, options: BabelOptions): OverrideConfig;
    copyWithEnv(envName: string, options: BabelOptions, runtimeDependencies: Map<string, string> | null, runtimeHash: string | null): Config;
    extend(config: Config): void;
    takeEnvs(): Map<string, LimitedOptions>;
    takeExtends(): string | undefined;
    takeOverrides(): Array<BabelOptions>;
}
export declare class OverrideConfig extends Config {
    readonly index: number;
    constructor(index: number, dir: string, envName: string | null, hash: string | null, options: BabelOptions, source: string, fileType: FileType, runtimeDependencies: Map<string, string> | null, runtimeHash: string | null);
    copyWithEnv(envName: string, options: BabelOptions, runtimeDependencies: Map<string, string> | null, runtimeHash: string | null): OverrideConfig;
}
export declare class VirtualConfig extends Config {
}
export declare class RestrictedConfig extends Config {
}
export declare type Chain = Set<Config> & {
    overrides: Chain[];
};
export declare class Chains {
    readonly babelrcDir?: string;
    readonly defaultChain: Chain;
    readonly envChains: Map<string, Chain>;
    constructor(babelrcDir: string | undefined, defaultChain: Chain, envChains: Map<string, Chain>);
    [Symbol.iterator](): IterableIterator<Chain>;
}
export declare function fromConfig(baseConfig: Config, expectedEnvNames?: string[], cache?: Cache): Promise<Chains>;
export declare function fromDirectory(dir: string, expectedEnvNames?: string[], cache?: Cache): Promise<Chains | null>;
