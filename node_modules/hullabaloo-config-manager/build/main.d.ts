/// <reference types="node" />
import BabelOptions from './BabelOptions';
import Cache, { prepare as prepareCache } from './Cache';
import * as collector from './collector';
import currentEnv from './currentEnv';
import ResolvedConfig from './ResolvedConfig';
import Verifier from './Verifier';
export { currentEnv, prepareCache };
export interface CreateOptions {
    options: BabelOptions;
    source: string;
    dir?: string;
    hash?: string;
    fileType?: collector.FileType.JSON | collector.FileType.JSON5;
}
export interface FromOptions {
    cache?: Cache;
    expectedEnvNames?: string[];
}
export declare function createConfig(options: CreateOptions): collector.VirtualConfig;
export declare function fromConfig(baseConfig: collector.Config, options?: FromOptions): Promise<ResolvedConfig>;
export declare function fromDirectory(dir: string, options?: FromOptions): Promise<ResolvedConfig | null>;
export declare function restoreVerifier(buffer: Buffer): Verifier;
