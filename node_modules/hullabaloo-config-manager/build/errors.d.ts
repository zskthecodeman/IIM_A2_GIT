import { Kind } from './resolvePluginsAndPresets';
export declare class SourceError extends Error {
    readonly source: string;
    readonly parent: Error | null;
    constructor(message: string, source: string, parent?: Error);
}
export declare class NoSourceFileError extends SourceError {
    constructor(source: string);
}
export declare class ParseError extends SourceError {
    constructor(source: string, parent: Error);
}
export declare class InvalidFileError extends SourceError {
    constructor(source: string, message: string);
}
export declare class ExtendsError extends SourceError {
    readonly clause: string;
    constructor(source: string, clause: string, parent: Error);
}
export declare class BadDependencyError extends SourceError {
    constructor(source: string, parent?: Error);
}
export declare class MultipleSourcesError extends SourceError {
    readonly otherSource: string;
    constructor(source: string, otherSource: string);
}
export declare class ResolveError extends SourceError {
    readonly source: string;
    readonly ref: string;
    readonly isPlugin: boolean;
    readonly isPreset: boolean;
    constructor(source: string, kind: Kind, ref: string, message?: string);
}
export declare class ResolveFromCacheError extends ResolveError {
    constructor(source: string, kind: Kind, ref: string);
}
