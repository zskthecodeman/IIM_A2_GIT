/// <reference types="node" />
import BabelOptions, { PluginOrPresetTarget } from './BabelOptions';
export interface ModuleSource {
    options: BabelOptions;
    runtimeDependencies: Map<string, string>;
    runtimeHash: string | null;
    unrestricted: boolean;
}
export interface UnrestrictedModuleSource extends ModuleSource {
    unrestricted: true;
}
export interface EnvModuleSource {
    byEnv: Map<string, ModuleSource>;
    factory(envName: string): ModuleSource;
}
export declare type ModuleSourcesMap = Map<string, UnrestrictedModuleSource | EnvModuleSource>;
export declare type NameMap = Map<PluginOrPresetTarget, string>;
export declare type PluginsAndPresetsMapValue = Map<string, string | null>;
export declare type PluginsAndPresetsMap = Map<string, PluginsAndPresetsMapValue>;
export default interface Cache {
    dependencyHashes: Map<string, Promise<string>>;
    fileExistence: Map<string, Promise<boolean>>;
    files: Map<string, Promise<Buffer | null>>;
    moduleSources: ModuleSourcesMap;
    nameMap: NameMap;
    pluginsAndPresets: PluginsAndPresetsMap;
    sourceHashes: Map<string, Promise<string>>;
}
export declare function prepare(): Cache;
export declare function isUnrestrictedModuleSource(value: UnrestrictedModuleSource | EnvModuleSource): value is UnrestrictedModuleSource;
