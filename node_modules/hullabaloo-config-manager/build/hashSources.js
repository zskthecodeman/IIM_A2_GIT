"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const path = require("path");
const dotProp = require("dot-prop");
const md5Hex = require("md5-hex");
const errors_1 = require("./errors");
const readSafe_1 = require("./readSafe");
function hashSource(source, runtimeHash, cache) {
    if (cache && cache.sourceHashes.has(source)) {
        return cache.sourceHashes.get(source);
    }
    const basename = path.basename(source);
    const parts = basename.split('#');
    const filename = parts[0];
    const filepath = path.join(path.dirname(source), filename);
    const pkgAccessor = filename === 'package.json'
        ? parts[1] || 'babel'
        : null;
    const promise = readSafe_1.default(filepath, cache)
        .then(contents => {
        if (!contents)
            throw new errors_1.NoSourceFileError(source);
        const inputs = runtimeHash === null ? [] : [runtimeHash];
        if (!pkgAccessor) {
            inputs.push(contents);
        }
        else {
            const json = JSON.parse(contents.toString('utf8'));
            const value = dotProp.get(json, pkgAccessor) || {};
            inputs.push(JSON.stringify(value));
        }
        return md5Hex(inputs);
    });
    if (cache) {
        cache.sourceHashes.set(source, promise);
    }
    return promise;
}
function hashSources(sources, fixedHashes, cache) {
    const promises = sources.map(item => {
        return fixedHashes && fixedHashes.has(item.source)
            ? fixedHashes.get(item.source)
            : hashSource(item.source, item.runtimeHash, cache);
    });
    return Promise.all(promises);
}
exports.default = hashSources;
//# sourceMappingURL=hashSources.js.map