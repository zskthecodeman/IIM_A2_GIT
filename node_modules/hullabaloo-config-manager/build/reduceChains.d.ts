import BabelOptions, { PluginOrPresetOptions } from './BabelOptions';
import Cache from './Cache';
import { Chains, FileType } from './collector';
export interface Dependency {
    default: boolean;
    envs: Set<string>;
    filename: string;
    fromPackage: string | null;
    hash?: string;
}
export interface Source {
    default: boolean;
    envs: Set<string>;
    hash?: string;
    runtimeHash: string | null;
    source: string;
}
export declare type PluginOrPresetFileDescriptor = {
    dirname: string;
    filename: string;
    name: string;
    options?: PluginOrPresetOptions;
};
export declare type PluginOrPresetDescriptor = {
    dirname: string;
    name: string;
    target: object | Function;
    options?: PluginOrPresetOptions;
};
export declare type PluginOrPresetDescriptorList = Array<PluginOrPresetFileDescriptor | PluginOrPresetDescriptor>;
export declare function isFileDescriptor(descriptor: PluginOrPresetFileDescriptor | PluginOrPresetDescriptor): descriptor is PluginOrPresetFileDescriptor;
export interface ReducedBabelOptions extends BabelOptions {
    plugins: PluginOrPresetDescriptorList;
    presets: PluginOrPresetDescriptorList;
}
export interface MergedConfig {
    fileType: FileType;
    options: ReducedBabelOptions;
    overrideIndex?: number;
}
export interface ModuleConfig {
    dir: string;
    envName: string | null;
    fileType: FileType.JS;
    source: string;
    overrideIndex?: number;
}
export declare type ConfigList = Array<MergedConfig | ModuleConfig> & {
    overrides: Array<MergedConfig | ModuleConfig>[];
};
export declare function isModuleConfig(object: MergedConfig | ModuleConfig): object is ModuleConfig;
export interface ReducedChains {
    dependencies: Dependency[];
    envNames: Set<string>;
    fixedSourceHashes: Map<string, string>;
    sources: Source[];
    unflattenedDefaultOptions: ConfigList;
    unflattenedEnvOptions: Map<string, ConfigList>;
}
export default function reduceChains(chains: Chains, cache?: Cache): ReducedChains;
